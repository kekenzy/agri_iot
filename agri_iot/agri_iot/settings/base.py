"""
Django settings for agri_iot project.

Generated by 'django-admin startproject' using Django 5.0.dev20230721191824.

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/
"""

import os
from pathlib import Path
# from agri_app.utils.debug_toolbar_util import show_debug_toolbar

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
TEMPLATES_DIR = os.path.join(BASE_DIR, "templates")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'j=d@d-i=^d4$e%1p50lk529i5nr80dv)3)wycowclea2t)1vy3'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = False


ALLOWED_HOSTS = ['*']
# ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

# 4.0以上の場合は、以下指定しないとCSRFでエラーが出る
CSRF_TRUSTED_ORIGINS = [
    'https://localhost', 'https://0.0.0.0'
]



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',      # ユーザ認証
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',      # デバッグツールバー
    'agri_app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfVjkkiewMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'agri_iot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            TEMPLATES_DIR,
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.static', #ここ追加
            ],
        },
    },
]

WSGI_APPLICATION = 'agri_iot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'agri_db',
        'USER': 'agri_user',
        'PASSWORD': 'agri_user',
        'HOST': 'db',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",

]

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'utils.validators.CustomPasswordValidator'
    }
]


# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/dev/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = '/var/www/static/'
# Default primary key field type
# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# migrateの読み込みファイルパス
FIXTURE_DIRS = {os.path.join(BASE_DIR, "agri_app/model/yaml")}

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ログ
LOG_LEVEL = "DEBUG"
LOG_DIR = os.environ.get('LOG_DIR', "/var/log/customer_portal")
if not os.path.isdir(LOG_DIR):
    try:
        os.makedirs(LOG_DIR)
    except PermissionError:
        # 権限がない場合は/tmpを使用
        LOG_DIR = "/tmp"
        if not os.path.isdir(LOG_DIR):
            os.makedirs(LOG_DIR)

LOGGING = {
    "version": 1,
    "filters": {
        "session_id": {"()": "agri_app.utils.logging_util.SessionIdFilter"},
        "request_id": {"()": "agri_app.utils.logging_util.RequestIdFilter"},
    },
    "formatters": {
        "verbose": {
            "()": "agri_app.utils.logging_util.CustomFormatter",
            "format": "[%(asctime)s][sid:%(session_id)s][rid:%(request_id)s][%(levelname)s][%(filename)s:%(lineno)d] %(message)s",
        },
    },
    "handlers": {
        "console": {
            "filters": ["session_id", "request_id"],
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "file": {
            "filters": ["session_id", "request_id"],
            "class": "logging.FileHandler",
            "formatter": "verbose",
            "filename": LOG_DIR + "/customer_portal.log",
        },
    },
    "loggers": {
        "django.db.backends": {
            "handlers": ["console"],
            "level": LOG_LEVEL,
        },
        "application": {
            "handlers": ["console", "file"],
            "level": LOG_LEVEL,
            "propagate": True,
        },
    },
}

# メール設定
# 開発環境ではコンソールに出力、本番環境ではSMTPを使用
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # 開発用
DEFAULT_FROM_EMAIL = 'noreply@agri-iot.com'

# 本番環境用のSMTP設定（必要に応じて有効化）
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'  # Gmailの場合
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your-email@gmail.com'
# EMAIL_HOST_PASSWORD = 'your-app-password'